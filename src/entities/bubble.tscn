[gd_scene load_steps=7 format=3 uid="uid://q24h412m2iuy"]

[ext_resource type="Texture2D" uid="uid://cxjjxxc381mvi" path="res://assets/particles/bubble.png" id="1_ndtjs"]

[sub_resource type="GDScript" id="GDScript_62u2s"]
script/source = "extends Area2D

var projectile_owner: CharacterBody2D = null

var speed_min = 50
var speed_max = 150
var max_speed = 150 # DON'T. ASK.
var speed_variation = 0.2
var direction_variation = 0.15

var speed: float
var target_position : Vector2
var velocity: Vector2

var move = true

func _ready():
	speed = randf_range(speed_min, speed_max)
	# Apply variation to direction
	var angle_to_target = atan2(target_position.y - position.y, target_position.x - position.x)
	var random_offset = randf_range(-direction_variation, direction_variation)
	angle_to_target += random_offset
	# Calculate velocity based on direction and speed
	velocity = Vector2(cos(angle_to_target), sin(angle_to_target)) * speed
	# Apply variation to speed
	var random_speed_variation = randf_range(1 - speed_variation, 1 + speed_variation)
	velocity *= random_speed_variation
	# Limit the maximum speed
	velocity = velocity.normalized() * min(velocity.length(), max_speed)
	
func _process(delta):
	if move == true:
		# Update position
		translate(velocity * delta)
	await get_tree().create_timer(randf_range(0.9, 1.3)).timeout
	move = false
	die()
	
func die():
	move = false
	$AnimationPlayer.play(\"death\")
	await $AnimationPlayer.animation_finished
	queue_free()

func _on_area_entered(area):
	if area.get_parent().has_method(\"handle_hit\") and area.get_parent().get_groups() != projectile_owner.get_groups():
		var enemy = area.get_parent()
		enemy.handle_hit(20)
		var direction = enemy.global_position - get_parent().get_node(\"Player\").global_position
		enemy.set_knockback(true, 100, .15, direction.normalized())
		die()
"

[sub_resource type="CircleShape2D" id="CircleShape2D_a734l"]
radius = 5.0

[sub_resource type="Animation" id="Animation_noxm7"]
resource_name = "death"
length = 0.15
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [1]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:scale")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.15),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(1, 1), Vector2(1.3, 1.3)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:self_modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.15),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Color(1, 1, 1, 1), Color(1, 1, 1, 0)]
}

[sub_resource type="Animation" id="Animation_qh825"]
resource_name = "idle"
length = 0.5
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.25, 0.5),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector2(1, 1), Vector2(1, 1.3), Vector2(1.3, 1)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_d4mfy"]
_data = {
"death": SubResource("Animation_noxm7"),
"idle": SubResource("Animation_qh825")
}

[node name="Bubble" type="Area2D"]
script = SubResource("GDScript_62u2s")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CircleShape2D_a734l")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = ExtResource("1_ndtjs")
hframes = 2

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "idle"
libraries = {
"": SubResource("AnimationLibrary_d4mfy")
}

[connection signal="area_entered" from="." to="." method="_on_area_entered"]
